"""
Django settings for barbook_project project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
from celery.schedules import crontab

BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "!9uphom7i*e6w=qb1gwda4g)@1i+t9i+la%7v2&tr6l$r&#9zw"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

#"localhost", "127.0.0.1", "app", "185.251.88.82"
ALLOWED_HOSTS = ["localhost", "127.0.0.1", "app", "185.251.88.82"]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_windows_tools",
    "barbook_app",
    "rest_framework",
    "drf_yasg",
    "django_apscheduler",
    "barbook_api",
    "silk",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "silk.middleware.SilkyMiddleware",
]

ROOT_URLCONF = "barbook_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

REST_FRAMEWORK = {
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
        "rest_framework.parsers.MultiPartParser",
        "rest_framework.parsers.FormParser",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
}

WSGI_APPLICATION = "barbook_project.wsgi.application"

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    "default": {
        #django.db.backends.mysql
        #django.db.backends.postgresql_psycopg2
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": os.environ.get("DB_NAME", "barbook_django"),
        "USER": os.environ.get("DB_USER", "root"),
        "PASSWORD": os.environ.get("DB_PASSWORD", "root"),
        "HOST": os.environ.get("DB_HOST", "127.0.0.1"),
        #5432
        "PORT": os.environ.get("DB_PORT", "5432"),
    }
}

LOGIN_URL = "/auth"

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/Moscow"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

MEDIA_URL = "/img_source/"

MEDIA_ROOT = "img_source"

# STATICFILES_DIRS = (
#    os.path.join(BASE_DIR, '/barbook_app/static/'),
# )
# /barbook_app

STATIC_URL = "/static/"
STATIC_ROOT = "static"


AUTH_USER_MODEL = "barbook_app.BarbookUser"

EMAIL_FROM_EMAIL = os.environ.get(
    "EMAIL_FROM_EMAIL", "django-itis-email-test@yandex.ru"
)
EMAIL_FROM_NAME = "Barbook"
DEFAULT_FROM_EMAIL = EMAIL_FROM_EMAIL

EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD", "uivrdmaovkjstajg")
EMAIL_HOST = os.environ.get("EMAIL_HOST", "smtp.yandex.ru")
EMAIL_PORT = int(os.environ.get("EMAIL_PORT", 465))
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER", EMAIL_FROM_EMAIL)
EMAIL_USE_SSL = True

REDIS_CONNECTION = os.environ.get("REDIS_CONNECTION", "redis://localhost:6379/0")

CELERY_BROKER_URL = REDIS_CONNECTION

# CELERY_BEAT_SCHEDULE = {
#     "import_cocktails": {
#         "task": "barbook_app.tasks.cocktails_validate",
#         "schedule": crontab(minute="*/2"),
#         "args": (),
#     },
# }
